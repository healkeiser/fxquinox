{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-fxquinox","title":"What is fxquinox","text":"<p>USD centric pipeline for feature animation and VFX projects.</p> <p>Note</p> <p>This documentation is updated regularly to reflect the most recent changes. If you spot any issue or have a feature request, don't hesitate to send me an email.</p>"},{"location":"fxcore/","title":"fxcore","text":"<p>The fxcore module provides a set of tools for managing and automating the creation of VFX entities.</p>"},{"location":"fxcore/#fxquinox.fxcore.check_asset","title":"check_asset","text":"<pre><code>check_asset(base_dir: str = '.') -&gt; bool\n</code></pre> <p>Checks if a valid asset directory structure exists within a project.</p> <p>Parameters:</p> Name Type Description Default <code>base_dir</code> <code>str</code> <p>The base directory where the asset should be located, typically the \"project/production/assets\" directory. Defaults to the current directory.</p> <code>'.'</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the asset is valid, <code>False</code> otherwise.</p>"},{"location":"fxcore/#fxquinox.fxcore.check_project","title":"check_project","text":"<pre><code>check_project(base_dir: str = '.') -&gt; bool\n</code></pre> <p>Checks if a valid project directory structure exists.</p> <p>Parameters:</p> Name Type Description Default <code>base_dir</code> <code>str</code> <p>The base directory where the project should be located. Defaults to the current directory.</p> <code>'.'</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the project is valid, <code>False</code> otherwise.</p>"},{"location":"fxcore/#fxquinox.fxcore.check_sequence","title":"check_sequence","text":"<pre><code>check_sequence(base_dir: str = '.') -&gt; bool\n</code></pre> <p>Checks if a valid sequence directory structure exists within a project.</p> <p>Parameters:</p> Name Type Description Default <code>base_dir</code> <code>str</code> <p>The base directory where the sequence should be located, typically the \"project/production/shots\" directory. Defaults to the current directory.</p> <code>'.'</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the sequence is valid, <code>False</code> otherwise.</p>"},{"location":"fxcore/#fxquinox.fxcore.check_shot","title":"check_shot","text":"<pre><code>check_shot(base_dir: str = '.') -&gt; bool\n</code></pre> <p>Checks if a valid shot directory structure exists within a sequence.</p> <p>Parameters:</p> Name Type Description Default <code>base_dir</code> <code>str</code> <p>The base directory where the shot should be located, typically the \"project/production/shots/sequence\" directory. Defaults to the current directory.</p> <code>'.'</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the shot is valid, <code>False</code> otherwise.</p>"},{"location":"fxcore/#fxquinox.fxcore.check_step","title":"check_step","text":"<pre><code>check_step(base_dir: str = '.') -&gt; bool\n</code></pre> <p>Checks if a valid step directory structure exists within a project.</p> <p>Parameters:</p> Name Type Description Default <code>base_dir</code> <code>str</code> <p>The base directory where the step should be located, typically the \"project/production/steps\" directory. Defaults to the current directory.</p> <code>'.'</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the step is valid, <code>False</code> otherwise.</p>"},{"location":"fxcore/#fxquinox.fxcore.check_task","title":"check_task","text":"<pre><code>check_task(base_dir: str = '.') -&gt; bool\n</code></pre> <p>Checks if a valid task directory structure exists within a project.</p> <p>Parameters:</p> Name Type Description Default <code>base_dir</code> <code>str</code> <p>The base directory where the task should be located, typically the \"project/production/tasks\" directory. Defaults to the current directory.</p> <code>'.'</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the task is valid, <code>False</code> otherwise.</p>"},{"location":"fxcore/#fxquinox.fxcore.create_asset","title":"create_asset","text":"<pre><code>create_asset(\n    asset_name: str, base_dir: str = \".\", parent: QWidget = None\n) -&gt; Optional[str]\n</code></pre> <p>Creates a new asset directory structure within a project.</p> <p>Parameters:</p> Name Type Description Default <code>asset_name</code> <code>str</code> <p>The name of the asset to create.</p> required <code>base_dir</code> <code>str</code> <p>The base directory where the asset will be created, typically the \"project/production/assets\" directory. Defaults to the current directory.</p> <code>'.'</code> <code>parent</code> <code>QWidget</code> <p>The parent widget for the message box. Only applicable in a GUI environment.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The name of the asset if created, <code>None</code> otherwise.</p> <p>Examples:</p> <p>Python</p> <pre><code>&gt;&gt;&gt; create_asset(\"charA\", \"/path/to/assets\")\n</code></pre> <p>CLI</p> <pre><code>&gt;&gt;&gt; fxquinox.cli.fxcore.create_asset charA --base_dir \"/path/to/assets\"\n</code></pre> Info <p>Has a CLI counterpart.</p>"},{"location":"fxcore/#fxquinox.fxcore.create_assets","title":"create_assets","text":"<pre><code>create_assets(\n    asset_names: list[str], base_dir: str = \".\"\n) -&gt; Optional[list[str]]\n</code></pre> <p>Creates new asset directory structures within a project.</p> <p>Parameters:</p> Name Type Description Default <code>asset_names</code> <code>list</code> <p>The names of the assets to create.</p> required <code>base_dir</code> <code>str</code> <p>The base directory where the asset will be created, typically the \"project/production/assets\" directory. Defaults to the current directory.</p> <code>'.'</code> <p>Returns:</p> Type Description <code>Optional[list[str]]</code> <p>Optional[list]: The names of the assets if created, <code>None</code> otherwise.</p> <p>Examples:</p> <p>Python</p> <pre><code>&gt;&gt;&gt; create_assets([\"charA\", \"propA\"], \"/path/to/assets\")\n</code></pre> <p>CLI</p> <pre><code>&gt;&gt;&gt; fxquinox.cli.fxcore.create_assets charA,propA --base_dir \"/path/to/assets\"\n</code></pre> Info <p>Has a CLI counterpart.</p>"},{"location":"fxcore/#fxquinox.fxcore.create_project","title":"create_project","text":"<pre><code>create_project(project_name: str, base_dir: str = '.') -&gt; Optional[str]\n</code></pre> <p>Creates a new project directory structure.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project to create.</p> required <code>base_dir</code> <code>str</code> <p>The base directory where the project will be created. Defaults to the current directory.</p> <code>'.'</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The name of the project if created, <code>None</code> otherwise.</p> <p>Examples:</p> <p>Python</p> <pre><code>&gt;&gt;&gt; create_project(\"my_project\")\n</code></pre> <p>CLI</p> <pre><code>&gt;&gt;&gt; python -m fxquinox.cli.fxcore create_project my_project\n</code></pre> Info <p>Has a CLI counterpart.</p>"},{"location":"fxcore/#fxquinox.fxcore.create_sequence","title":"create_sequence","text":"<pre><code>create_sequence(\n    sequence_name: str, base_dir: str = \".\", parent: QWidget = None\n) -&gt; Optional[str]\n</code></pre> <p>Creates a new sequence directory structure within a project.</p> <p>Parameters:</p> Name Type Description Default <code>sequence_name</code> <code>str</code> <p>The name of the sequence to create.</p> required <code>base_dir</code> <code>str</code> <p>The base directory where the sequence will be created, typically the \"project/production/shots\" directory. Defaults to the current directory.</p> <code>'.'</code> <code>parent</code> <code>QWidget</code> <p>The parent widget for the message box. Only applicable in a GUI environment.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The name of the sequence if created, <code>None</code> otherwise.</p> <p>Examples:</p> <p>Python</p> <pre><code>&gt;&gt;&gt; create_sequence(\"010\", \"/path/to/shots\")\n</code></pre> <p>CLI</p> <pre><code>&gt;&gt;&gt; fxquinox.cli.fxcore.create_sequence 010 --base_dir \"/path/to/shots\"\n</code></pre> Info <p>Has a CLI counterpart.</p>"},{"location":"fxcore/#fxquinox.fxcore.create_sequences","title":"create_sequences","text":"<pre><code>create_sequences(\n    sequence_names: list[str], base_dir: str = \".\"\n) -&gt; Optional[list[str]]\n</code></pre> <p>Creates new sequence directory structures within a project.</p> <p>Parameters:</p> Name Type Description Default <code>sequence_names</code> <code>list</code> <p>The names of the sequences to create.</p> required <code>base_dir</code> <code>str</code> <p>The base directory where the sequence will be created, typically the \"project/production/shots\" directory. Defaults to the current directory.</p> <code>'.'</code> <p>Returns:</p> Type Description <code>Optional[list[str]]</code> <p>Optional[list]: The names of the sequences if created, <code>None</code> otherwise.</p> <p>Examples:</p> <p>Python</p> <pre><code>&gt;&gt;&gt; create_sequences([\"010\", \"020\"], \"/path/to/shots\")\n</code></pre> <p>CLI</p> <pre><code>&gt;&gt;&gt; fxquinox.cli.fxcore.create_sequences 010,020 --base_dir \"/path/to/shots\"\n</code></pre> Info <p>Has a CLI counterpart.</p>"},{"location":"fxcore/#fxquinox.fxcore.create_shot","title":"create_shot","text":"<pre><code>create_shot(\n    shot_name: str, base_dir: str = \".\", parent: QWidget = None\n) -&gt; Optional[str]\n</code></pre> <p>Creates a new shot directory structure within a sequence.</p> <p>Parameters:</p> Name Type Description Default <code>shot_name</code> <code>str</code> <p>The name of the shot to create.</p> required <code>base_dir</code> <code>str</code> <p>The base directory where the shot will be created, typically the \"project/production/shots/sequence\" directory. Defaults to the current directory.</p> <code>'.'</code> <code>parent</code> <code>QWidget</code> <p>The parent widget for the message box. Only applicable in a GUI environment.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The name of the shot if created, <code>None</code> otherwise.</p> <p>Examples:</p> <p>Python</p> <pre><code>&gt;&gt;&gt; create_shot(\"0010\", \"/path/to/sequence\")\n</code></pre> <p>CLI</p> <pre><code>&gt;&gt;&gt; fxquinox.cli.fxcore.create_shot 0010 --base_dir \"/path/to/sequence\"\n</code></pre> Info <p>Has a CLI counterpart.</p>"},{"location":"fxcore/#fxquinox.fxcore.create_shots","title":"create_shots","text":"<pre><code>create_shots(shot_names: list[str], base_dir: str = '.') -&gt; Optional[list[str]]\n</code></pre> <p>Creates new shot directory structures within a sequence.</p> <p>Parameters:</p> Name Type Description Default <code>shot_names</code> <code>list[str]</code> <p>The names of the shots to create.</p> required <code>base_dir</code> <code>str</code> <p>The base directory where the shots will be created, typically the \"project/production/shots/sequence\" directory. Defaults to the current directory.</p> <code>'.'</code> <p>Returns:</p> Type Description <code>Optional[list[str]]</code> <p>Optional[list[str]]: The names of the shots if created, <code>None</code> otherwise.</p> <p>Examples:</p> <p>Python</p> <pre><code>&gt;&gt;&gt; create_shots([\"0010\", \"0020\"], \"/path/to/sequence\")\n</code></pre> <p>CLI</p> <pre><code>&gt;&gt;&gt; fxquinox.cli.fxcore.create_shots 0010,0020 --base_dir \"/path/to/sequence\"\n</code></pre> Info <p>Has a CLI counterpart.</p>"},{"location":"fxcore/#fxquinox.fxcore.create_step","title":"create_step","text":"<pre><code>create_step(\n    step_name: str, base_dir: str = \".\", parent: QWidget = None\n) -&gt; Optional[str]\n</code></pre> <p>Creates a new step directory structure within a project.</p> <p>Parameters:</p> Name Type Description Default <code>step_name</code> <code>str</code> <p>The name of the step to create.</p> required <code>base_dir</code> <code>str</code> <p>The base directory where the step will be created, typically the \"project/production/steps\" directory. Defaults to the current directory.</p> <code>'.'</code> <code>parent</code> <code>QWidget</code> <p>The parent widget for the message box. Only applicable in a GUI environment.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The name of the step if created, <code>None</code> otherwise.</p> <p>Examples:</p> <p>Python</p> <pre><code>&gt;&gt;&gt; create_step(\"modeling\", \"/path/to/steps\")\n</code></pre> <p>CLI</p> <pre><code>&gt;&gt;&gt; fxquinox.cli.fxcore.create_step modeling --base_dir \"/path/to/steps\"\n</code></pre> Info <p>Has a CLI counterpart.</p>"},{"location":"fxcore/#fxquinox.fxcore.create_task","title":"create_task","text":"<pre><code>create_task(\n    task_name: str, base_dir: str = \".\", parent: QWidget = None\n) -&gt; Optional[str]\n</code></pre> <p>Creates a new task directory structure within a project.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>The name of the task to create.</p> required <code>base_dir</code> <code>str</code> <p>The base directory where the task will be created, typically the \"project/production/tasks\" directory. Defaults to the current directory.</p> <code>'.'</code> <code>parent</code> <code>QWidget</code> <p>The parent widget for the message box. Only applicable in a GUI environment.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The name of the task if created, <code>None</code> otherwise.</p> <p>Examples:</p> <p>Python</p> <pre><code>&gt;&gt;&gt; create_task(\"rigging\", \"/path/to/tasks\")\n</code></pre> <p>CLI</p> <pre><code>&gt;&gt;&gt; fxquinox.cli.fxcore.create_task rigging --base_dir \"/path/to/tasks\"\n</code></pre> Info <p>Has a CLI counterpart.</p>"},{"location":"fxcore/#fxquinox.fxcore.create_workfile","title":"create_workfile","text":"<pre><code>create_workfile(\n    workfile_name: str, base_dir: str = \".\", parent: QWidget = None\n) -&gt; Optional[str]\n</code></pre> <p>Creates a new workfile directory structure within a project.</p> <p>Parameters:</p> Name Type Description Default <code>workfile_name</code> <code>str</code> <p>The name of the workfile to create.</p> required <code>base_dir</code> <code>str</code> <p>The base directory where the workfile will be created, typically the \"project/production/workfiles\" directory. Defaults to the current directory.</p> <code>'.'</code> <code>parent</code> <code>QWidget</code> <p>The parent widget for the message box. Only applicable in a GUI environment.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The name of the workfile if created, <code>None</code> otherwise.</p> <p>Examples:</p> <p>Python</p> <pre><code>&gt;&gt;&gt; create_workfile(\"rigging_v001\", \"/path/to/workfiles\")\n</code></pre> <p>CLI</p> <pre><code>&gt;&gt;&gt; fxquinox.cli.fxcore.create_workfile rigging_v001 --base_dir \"/path/to/workfiles\"\n</code></pre> Info <p>Has a CLI counterpart.</p> Bug <p>Not implemented yet.</p>"},{"location":"fxcore/#fxquinox.fxcore.get_project","title":"get_project","text":"<pre><code>get_project() -&gt; Dict[str, Optional[str]]\n</code></pre> <p>Gets the project path, name, assets path, and shots path from the environment file, or the environment variables (if set beforehand).</p> <p>Returns:</p> Type Description <code>Dict[str, Optional[str]]</code> <p>Dict[str, Optional[str]]: A dictionary with keys 'FXQUINOX_PROJECT_ROOT', 'FXQUINOX_PROJECT_NAME', 'FXQUINOX_PROJECT_ASSETS', and 'FXQUINOX_PROJECT_SHOTS' pointing to their respective paths if found, <code>None</code> otherwise.</p>"},{"location":"fxcore/#fxquinox.fxcore.set_project","title":"set_project","text":"<pre><code>set_project(\n    launcher: Optional[FXLauncherSystemTray] = None,\n    quit_on_last_window_closed: bool = False,\n    project_path: str = None,\n) -&gt; Optional[Tuple[str, str]]\n</code></pre> <p>Sets the project path in the project browser.</p> <p>Parameters:</p> Name Type Description Default <code>launcher</code> <code>FXLauncherSystemTray</code> <p>The launcher instance to update the project name. Defaults to <code>None</code>.</p> <code>None</code> <code>quit_on_last_window_closed</code> <code>bool</code> <p>Whether to quit the application when the last window is closed. Defaults to <code>False</code>.</p> <code>False</code> <code>project_dir</code> <code>str</code> <p>The project directory to set. Defaults to <code>None</code>.</p> required <p>Returns:</p> Type Description <code>Optional[Tuple[str, str]]</code> <p>Optional[Tuple[str, str]]: A tuple with project path and project name if set, <code>None</code> otherwise.</p>"},{"location":"fxentities/","title":"fxentities","text":""},{"location":"fxentities/#fxquinox.fxentities.DCC","title":"DCC","text":"<p>Holds the DCC names.</p>"},{"location":"fxentities/#fxquinox.fxentities.FXSequence","title":"FXSequence  <code>dataclass</code>","text":"<p>             Bases: <code>FXEntity</code></p> <p>Represents a Sequence in a Project.</p> <p>Attributes:</p> Name Type Description <code>parent</code> <code>Optional[Union[Project, Episode]]</code> <p>The parent of the Sequence, which can be either a Project or an Episode. Defaults to <code>None</code>.</p> <code>episode</code> <code>Optional[Episode]</code> <p>The Episode that the Sequence belongs to. Defaults to <code>None</code>.</p> <code>assets</code> <code>List[Asset]</code> <p>The list of Assets in the Sequence. Defaults to an empty list.</p> <code>shots</code> <code>List[Shot]</code> <p>The list of Shots in the Sequence. Defaults to an empty list.</p> <code>publishes</code> <code>List[Publish]</code> <p>The list of Publishes in the Sequence. Defaults to an empty list.</p> <code>versions</code> <code>List[Version]</code> <p>The list of Versions in the Sequence. Defaults to an empty list.</p> <code>steps</code> <code>List[Step]</code> <p>The list of Steps in the Sequence. Defaults to an empty list.</p> <code>tasks</code> <code>List[Task]</code> <p>The list of Tasks in the Sequence. Defaults to an empty list.</p>"},{"location":"fxentities/#fxquinox.fxentities.FXShot","title":"FXShot  <code>dataclass</code>","text":"<p>Represents a Shot in a Sequence.</p> <p>Attributes:</p> Name Type Description <code>parent</code> <code>Optional[Union[Project, Episode]]</code> <p>The parent of the Shot, which can be either a Project or an Episode. Defaults to <code>None</code>.</p> <code>sequence</code> <code>Optional[Sequence]</code> <p>The Sequence that the Shot belongs to. Defaults to <code>None</code>.</p> <code>episode</code> <code>Optional[Episode]</code> <p>The Episode that the Shot belongs to. Defaults to <code>None</code>.</p> <code>assets</code> <code>List[Asset]</code> <p>The list of Assets in the Shot. Defaults to an empty list.</p> <code>cut_in</code> <code>int</code> <p>The cut-in frame number of the Shot. Defaults to 1001.</p> <code>cut_out</code> <code>int</code> <p>The cut-out frame number of the Shot. Defaults to 1100.</p> <code>handle_in</code> <code>int</code> <p>The handle-in frame number of the Shot. Defaults to 901.</p> <code>handle_out</code> <code>int</code> <p>The handle-out frame number of the Shot. Defaults to 1200.</p>"},{"location":"fxentities/#fxquinox.fxentities.entity","title":"entity","text":"<p>Holds the entity names.</p>"},{"location":"fxenvironment/","title":"fxenvironment","text":""},{"location":"fxenvironment/#fxquinox.fxenvironment.get_version_from_setup","title":"get_version_from_setup","text":"<pre><code>get_version_from_setup() -&gt; str\n</code></pre> <p>Get the version string from the <code>setup.py</code> file.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The version string.</p>"},{"location":"fxenvironment/#fxquinox.fxenvironment.setup_environment","title":"setup_environment","text":"<pre><code>setup_environment(write_file: bool = False) -&gt; None\n</code></pre> <p>Initialize the environment variables for the package.</p> <p>Parameters:</p> Name Type Description Default <code>write_file</code> <code>bool</code> <p>Whether to write the environment variables to a file. Defaults to <code>False</code>.</p> <code>False</code>"},{"location":"fxfiles/","title":"fxfiles","text":""},{"location":"fxfiles/#fxquinox.fxfiles.FXProjectTemplate","title":"FXProjectTemplate","text":"<p>A class representing an FX project template.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the project.</p> <code>root</code> <code>str</code> <p>The root directory of the project.</p> <code>info</code> <code>dict</code> <p>The project information.</p>"},{"location":"fxfiles/#fxquinox.fxfiles.FXProjectTemplate.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Returns a string representation of the FX project template.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The string representation of the FX project template.</p>"},{"location":"fxfiles/#fxquinox.fxfiles.FXProjectTemplate.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json_data: dict) -&gt; FXProjectTemplate\n</code></pre> <p>Creates an FXProjectTemplate instance from a JSON object.</p> <p>Parameters:</p> Name Type Description Default <code>json_data</code> <code>dict</code> <p>The JSON data containing the project template information.</p> required <p>Returns:</p> Name Type Description <code>FXProjectTemplate</code> <code>FXProjectTemplate</code> <p>The FXProjectTemplate instance created from the JSON data.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; project_info = json.loads(\n&gt;&gt;&gt;     Path.joinpath(\n&gt;&gt;&gt;         Path(\"C:/path/to/project\"), f\"projectname_info.json\"\n&gt;&gt;&gt;     ).read_text()\n&gt;&gt;&gt; )\n&gt;&gt;&gt; project = FXProjectTemplate.from_json(project_info)\n</code></pre>"},{"location":"fxfiles/#fxquinox.fxfiles.FXProjectTemplate.from_string","title":"from_string  <code>classmethod</code>","text":"<pre><code>from_string(input_string: str) -&gt; FXProjectTemplate\n</code></pre> <p>Creates an FXProjectTemplate instance from a string.</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>The string containing information to create the</p> required <p>Returns:</p> Name Type Description <code>FXProjectTemplate</code> <code>FXProjectTemplate</code> <p>The FXProjectTemplate instance created from the input string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; project = FXProjectTemplate.from_string(\"C:/path/to/project\")\n&gt;&gt;&gt; print(project.name, project.root)\n\"Project Name\", \"C:/path/to/project\"\n</code></pre>"},{"location":"fxfiles/#fxquinox.fxfiles.FXWorkfileTemplate","title":"FXWorkfileTemplate","text":"<p>A class representing an FX workfile template.</p> <p>Attributes:</p> Name Type Description <code>sequence</code> <code>str</code> <p>The sequence number.</p> <code>shot</code> <code>str</code> <p>The shot number.</p> <code>step</code> <code>str</code> <p>The step in the FX workflow.</p> <code>task</code> <code>str</code> <p>The task associated with the workfile.</p> <code>version</code> <code>str</code> <p>The version number.</p>"},{"location":"fxfiles/#fxquinox.fxfiles.FXWorkfileTemplate.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Returns a string representation of the FX workfile template.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The string representation of the FX workfile template.</p>"},{"location":"fxfiles/#fxquinox.fxfiles.FXWorkfileTemplate.from_string","title":"from_string  <code>classmethod</code>","text":"<pre><code>from_string(input_string: str, return_int: bool = True) -&gt; FXWorkfileTemplate\n</code></pre> <p>Creates an FXWorkfileTemplate instance from a string.</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>The string containing information to create the</p> required <code>return_int</code> <code>bool</code> <p>If <code>True</code>, returns the sequence, shot and version as integers.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>FXWorkfileTemplate</code> <code>FXWorkfileTemplate</code> <p>The FXWorkfileTemplate instance created from the input string.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the input string format is invalid.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; workfile = FXWorkfileTemplate.from_string(\"000_0020_LGT_main_v001\")\n&gt;&gt;&gt; print(workfile.sequence, workfile.shot)\n\"000\", \"0020\"\n</code></pre>"},{"location":"fxfiles/#fxquinox.fxfiles.FXWorkfileTemplate.generate_filename","title":"generate_filename","text":"<pre><code>generate_filename() -&gt; str\n</code></pre> <p>Generates a filename based on the attributes of the FX workfile template.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The generated filename.</p>"},{"location":"fxfiles/#fxquinox.fxfiles.create_child_from_dict","title":"create_child_from_dict","text":"<pre><code>create_child_from_dict(child_dict: dict, parent_dir: str) -&gt; None\n</code></pre> <p>Recursively creates child folders and files based on the provided dict structure.</p> <p>Parameters:</p> Name Type Description Default <code>child_dict</code> <code>dict</code> <p>The dictionary containing the child structure.</p> required <code>parent_dir</code> <code>str</code> <p>The parent directory where the child will be created.</p> required"},{"location":"fxfiles/#fxquinox.fxfiles.create_structure_from_dict","title":"create_structure_from_dict","text":"<pre><code>create_structure_from_dict(structure_dict: dict, base_dir: str = '.') -&gt; None\n</code></pre> <p>Creates the directory structure based on the provided dict structure.</p> <p>Parameters:</p> Name Type Description Default <code>structure_dict</code> <code>dict</code> <p>The dictionary containing the structure.</p> required <code>base_dir</code> <code>str</code> <p>The base directory where the structure will be created.</p> <code>'.'</code>"},{"location":"fxfiles/#fxquinox.fxfiles.extract_version_integer_value","title":"extract_version_integer_value","text":"<pre><code>extract_version_integer_value(string: str) -&gt; Optional[int]\n</code></pre> <p>Extracts the integer value from a string in the format <code>\"vXXX\"</code>.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>The input string containing the value in the format <code>\"vXXX\"</code>.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>Optional[int]</code> <p>The integer value extracted from the input string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; extract_version_integer_value(\"v001\")\n1\n&gt;&gt;&gt; extract_version_integer_value(\"abc123\")\nNone\n</code></pre>"},{"location":"fxfiles/#fxquinox.fxfiles.find_version_in_filename","title":"find_version_in_filename","text":"<pre><code>find_version_in_filename(\n    filename: str, as_string: bool = False\n) -&gt; Optional[str]\n</code></pre> <p>Finds the version number in a filename.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The filename to search for the version number.</p> required <code>as_string</code> <code>bool</code> <p>If <code>True</code>, returns the version number as a string with the 'v' prefix. Defaults to <code>False</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The version number found in the filename, if any.</p>"},{"location":"fxfiles/#fxquinox.fxfiles.get_all_metadata","title":"get_all_metadata","text":"<pre><code>get_all_metadata(file_path: str) -&gt; Dict[str, Optional[str]]\n</code></pre> <p>Retrieve all metadata for a file or directory.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the file or directory to retrieve metadata from.</p> required <p>Returns:</p> Type Description <code>Dict[str, Optional[str]]</code> <p>Dictionary of all metadata names and their values. If a metadata entry</p> <code>Dict[str, Optional[str]]</code> <p>is not found, its value is <code>None</code>.</p>"},{"location":"fxfiles/#fxquinox.fxfiles.get_metadata_type","title":"get_metadata_type","text":"<pre><code>get_metadata_type(metadata_name: str, metadata_value: str) -&gt; type\n</code></pre> <p>Determines the data type of a metadata value.</p> <p>Parameters:</p> Name Type Description Default <code>metadata_name</code> <code>str</code> <p>The name of the metadata entry. This is mostly used for special cases where the type can be determined based on the name only.</p> required <code>metadata_value</code> <code>str</code> <p>The metadata value to determine the type of.</p> required <p>Returns:</p> Name Type Description <code>type</code> <code>type</code> <p>The data type of the metadata value. Returns <code>str</code> if the type cannot be determined.</p>"},{"location":"fxfiles/#fxquinox.fxfiles.get_multiple_metadata","title":"get_multiple_metadata","text":"<pre><code>get_multiple_metadata(\n    file_path: str, metadata_names: List[str]\n) -&gt; Dict[str, Optional[str]]\n</code></pre> <p>Retrieve multiple metadata entries for a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the file.</p> required <code>metadata_names</code> <code>List[str]</code> <p>List of metadata names to retrieve.</p> required <p>Returns:</p> Type Description <code>Dict[str, Optional[str]]</code> <p>Dictionary of metadata names and their values. If a metadata entry is</p> <code>Dict[str, Optional[str]]</code> <p>not found, its value is <code>None</code>.</p>"},{"location":"fxfiles/#fxquinox.fxfiles.get_next_version","title":"get_next_version","text":"<pre><code>get_next_version(\n    path: str, as_string: bool = False, return_highest: bool = False\n) -&gt; Union[int, str]\n</code></pre> <p>Determines the next version number based on the existing versioned files in the given directory.</p> <p>This function scans the specified directory for files with version numbers at the end of their names, in the format <code>_vNNN</code> where <code>N</code> is a digit. It identifies the highest version number currently present and returns the next version number, incremented by one.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the directory containing the versioned files.</p> required <code>as_string</code> <code>bool</code> <p>If <code>True</code>, returns the next version number as a string with the 'v' prefix. Defaults to <code>False</code>.</p> <code>False</code> <code>return_highest</code> <code>bool</code> <p>If <code>True</code>, returns the highest version number found in the directory. Defaults to <code>False</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[int, str]</code> <p>Union[int, str]: The next version number to be used, incremented by one from the highest existing version. Returns 1 if no versioned files are found.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_next_version(\"/path/to/your/directory\")\n4\n&gt;&gt;&gt; get_next_version(\"/path/to/your/directory\", as_string=True)\n\"v004\"\n</code></pre>"},{"location":"fxfiles/#fxquinox.fxfiles.path_to_unix","title":"path_to_unix","text":"<pre><code>path_to_unix(path: str) -&gt; str\n</code></pre> <p>Replaces backward slashes with forward slashes (Unix format) in a given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The input path containing backward slashes.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The path with all backward slashes replaced by forward slashes.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; path_to_unix(\"C:\\Users\\User\\Documents\")\n\"C:/Users/User/Documents\"\n</code></pre>"},{"location":"fxfiles/#fxquinox.fxfiles.replace_placeholders_in_dict","title":"replace_placeholders_in_dict","text":"<pre><code>replace_placeholders_in_dict(data: Dict, replacements: Dict) -&gt; Dict\n</code></pre> <p>Recursively replaces placeholders in a dictionary with values from another dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict</code> <p>The dictionary to process.</p> required <code>replacements</code> <code>Dict</code> <p>The dictionary containing placeholder-replacement pairs.</p> required <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>The dictionary with placeholders replaced by values.</p>"},{"location":"fxfiles/#fxquinox.fxfiles.replace_placeholders_in_string","title":"replace_placeholders_in_string","text":"<pre><code>replace_placeholders_in_string(s: str, replacements: Dict) -&gt; str\n</code></pre> <p>Replaces placeholders in a string with values from a dictionary.</p> Note <p>Placeholders are in the format <code>$placeholder$</code>.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>The string to process.</p> required <code>replacements</code> <code>Dict</code> <p>The dictionary containing placeholder-replacement pairs.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The string with placeholders replaced by values.</p>"},{"location":"fxfiles/#fxquinox.fxfiles.set_multiple_metadata","title":"set_multiple_metadata","text":"<pre><code>set_multiple_metadata(file_path: str, metadata: Dict[str, str]) -&gt; None\n</code></pre> <p>Set multiple metadata entries for a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the file.</p> required <code>metadata</code> <code>Dict[str, str]</code> <p>Dictionary of metadata names and values to set.</p> required"},{"location":"fxlauncher/","title":"fxlauncher","text":""},{"location":"fxlauncher/#fxquinox.tools.fxlauncher.FXExecutableRunnerThread","title":"FXExecutableRunnerThread","text":"<p>             Bases: <code>QThread</code></p> <p>A QThread subclass to run an executable in a separate thread.</p>"},{"location":"fxlauncher/#fxquinox.tools.fxlauncher.FXLauncherSystemTray","title":"FXLauncherSystemTray","text":"<p>             Bases: <code>FXSystemTray</code></p> <p>The Fxquinox main launcher UI class.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>The parent widget.</p> <code>None</code> <code>icon</code> <code>QIcon</code> <p>The icon to display in the system tray.</p> <code>None</code> <code>project</code> <code>str</code> <p>The current project name.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>project</code> <code>str</code> <p>The current project name.</p> <code>colors</code> <code>dict</code> <p>The color dictionary.</p> <code>runner_threads</code> <code>list</code> <p>A list of runner threads.</p> Signals <p>project_changed (str, str): The signal emitted when the project is     changed.</p> Note <p>This class inherits from <code>FXSystemTray</code> which is a custom system tray class that inherits from <code>QSystemTrayIcon</code>.</p>"},{"location":"fxlauncher/#fxquinox.tools.fxlauncher.FXLauncherSystemTray.__create_actions","title":"__create_actions","text":"<pre><code>__create_actions() -&gt; None\n</code></pre> <p>Creates the actions for the system tray.</p> Note <p>Using <code>__</code> to avoid name clashes with the parent class.</p>"},{"location":"fxlauncher/#fxquinox.tools.fxlauncher.FXLauncherSystemTray.__handle_connections","title":"__handle_connections","text":"<pre><code>__handle_connections() -&gt; None\n</code></pre> <p>Connects the signals to the slots.</p> Note <p>Using <code>__</code> to avoid name clashes with the parent class.</p>"},{"location":"fxlauncher/#fxquinox.tools.fxlauncher.FXLauncherSystemTray.closeEvent","title":"closeEvent","text":"<pre><code>closeEvent(_) -&gt; None\n</code></pre> <p>Overrides the close event to handle the system tray close event.</p>"},{"location":"fxlauncher/#fxquinox.tools.fxlauncher.run_launcher","title":"run_launcher","text":"<pre><code>run_launcher(\n    parent: QWidget = None,\n    quit_on_last_window_closed: bool = True,\n    show_splashscreen: bool = False,\n) -&gt; None\n</code></pre> <p>Runs the launcher UI.</p> <p>Parameters:</p> Name Type Description Default <code>quit_on_last_window_closed</code> <code>bool</code> <p>Whether to quit the application when the last window is closed. Defaults to <code>True</code>.</p> <code>True</code> <code>show_splashscreen</code> <code>bool</code> <p>Whether to show the splash screen. Defaults to <code>False</code>.</p> <code>False</code>"},{"location":"fxlog/","title":"fxlog","text":""},{"location":"fxlog/#fxquinox.fxlog.FXFormatter","title":"FXFormatter","text":"<p>             Bases: <code>Formatter</code></p> <p>Custom log formatter that adds color to log messages based on the log level.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>str</code> <p>The log message format string.</p> <code>None</code> <code>datefmt</code> <code>str</code> <p>The date format string.</p> <code>None</code> <code>style</code> <code>str</code> <p>The format style.</p> <code>'{'</code> <code>color</code> <code>bool</code> <p>Whether to enable color logging. Defaults to <code>False</code>.</p> <code>False</code> <code>separator</code> <code>bool</code> <p>Whether to enable a separator between log messages. Defaults to <code>False</code>.</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>LEVEL_COLORS</code> <code>dict</code> <p>A dictionary mapping log levels to their respective color codes.</p> <code>color</code> <code>bool</code> <p>Whether to enable color logging.</p> <code>separator</code> <code>bool</code> <p>Whether to enable a separator between log messages.</p>"},{"location":"fxlog/#fxquinox.fxlog.FXTimedRotatingFileHandler","title":"FXTimedRotatingFileHandler","text":"<p>             Bases: <code>TimedRotatingFileHandler</code></p> <p>Custom log file handler that rotates log files at midnight.</p> <p>Attributes:</p> Name Type Description <code>suffix</code> <code>str</code> <p>The suffix to append to the rotated log file.</p>"},{"location":"fxlog/#fxquinox.fxlog.clear_logs","title":"clear_logs","text":"<pre><code>clear_logs() -&gt; None\n</code></pre> <p>Clears the fxquinox log files.</p>"},{"location":"fxlog/#fxquinox.fxlog.get_logger","title":"get_logger","text":"<pre><code>get_logger(\n    logger_name: str, color: bool = True, separator: bool = False\n) -&gt; Logger\n</code></pre> <p>Creates a custom logger with the specified name and returns it.</p> <p>Parameters:</p> Name Type Description Default <code>logger_name</code> <code>str</code> <p>The name of the logger.</p> required <code>color</code> <code>bool</code> <p>Whether to enable color logging. Defaults to <code>True</code>.</p> <code>True</code> <code>separator</code> <code>bool</code> <p>Whether to enable a separator between log messages. Defaults to <code>False</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>Logger</code> <p>logging.Logger: The custom logger.</p>"},{"location":"fxlog/#fxquinox.fxlog.set_log_level","title":"set_log_level","text":"<pre><code>set_log_level(level: int) -&gt; None\n</code></pre> <p>Sets the logging level for all instances of loggers created by the <code>FXFormatter</code> class.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>The logging level to set.</p> required"},{"location":"fxprojectbrowser/","title":"fxprojectprowser","text":""},{"location":"fxprojectbrowser/#fxquinox.tools.fxprojectbrowser.FXCreateShotDialog","title":"FXCreateShotDialog","text":"<p>             Bases: <code>QDialog</code></p>"},{"location":"fxprojectbrowser/#fxquinox.tools.fxprojectbrowser.FXCreateShotDialog.closeEvent","title":"closeEvent","text":"<pre><code>closeEvent(_) -&gt; None\n</code></pre> <p>Overrides the close event.</p>"},{"location":"fxprojectbrowser/#fxquinox.tools.fxprojectbrowser.FXCreateStepDialog","title":"FXCreateStepDialog","text":"<p>             Bases: <code>QDialog</code></p>"},{"location":"fxprojectbrowser/#fxquinox.tools.fxprojectbrowser.FXCreateTaskDialog","title":"FXCreateTaskDialog","text":"<p>             Bases: <code>QDialog</code></p>"},{"location":"fxprojectbrowser/#fxquinox.tools.fxprojectbrowser.FXMetadataTableWidget","title":"FXMetadataTableWidget","text":"<p>             Bases: <code>QTableWidget</code></p>"},{"location":"fxprojectbrowser/#fxquinox.tools.fxprojectbrowser.FXProjectBrowserWindow","title":"FXProjectBrowserWindow","text":"<p>             Bases: <code>FXMainWindow</code></p> <p>The The Fxquinox project browser class. Provides a window for browsing the project assets, shots, steps, tasks, and workfiles.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>Optional[QWidget]</code> <p>The parent widget. Defaults to <code>None</code>.</p> <code>None</code> <code>icon</code> <code>Optional[str]</code> <p>The icon name. Defaults to <code>None</code>.</p> <code>None</code> <code>title</code> <code>Optional[str]</code> <p>The window title. Defaults to <code>None</code>.</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>The window size. Defaults to <code>None</code>.</p> <code>None</code> <code>documentation</code> <code>Optional[str]</code> <p>The documentation URL. Defaults to <code>None</code>.</p> <code>None</code> <code>project</code> <code>Optional[str]</code> <p>The project name. Defaults to <code>None</code>.</p> <code>None</code> <code>version</code> <code>Optional[str]</code> <p>The version number. Defaults to <code>None</code>.</p> <code>None</code> <code>company</code> <code>Optional[str]</code> <p>The company name. Defaults to <code>None</code>.</p> <code>None</code> <code>color_a</code> <code>Optional[str]</code> <p>The color A for the window. Defaults to <code>None</code>.</p> <code>None</code> <code>color_b</code> <code>Optional[str]</code> <p>The color B for the window. Defaults to <code>None</code>.</p> <code>None</code> <code>ui_file</code> <code>Optional[str]</code> <p>The UI file to load. Defaults to <code>None</code>.</p> <code>None</code> <code>dcc</code> <code>DCC</code> <p>The DCC to use. Defaults to <code>fxentities.DCC.standalone</code>.</p> <code>standalone</code> <p>Attributes:</p> Name Type Description <code>dcc</code> <code>DCC</code> <p>The DCC to use.</p> <code>project_info</code> <code>dict</code> <p>The project information.</p> <code>asset</code> <code>Optional[str]</code> <p>The current asset.</p> <code>sequence</code> <code>str</code> <p>The current sequence.</p> <code>shot</code> <code>str</code> <p>The current shot.</p> <code>step</code> <code>str</code> <p>The current step.</p> <code>task</code> <code>str</code> <p>The current task.</p> <code>workfile</code> <code>str</code> <p>The current workfile.</p>"},{"location":"fxprojectbrowser/#fxquinox.tools.fxprojectbrowser.FXProjectBrowserWindow.create_shot","title":"create_shot","text":"<pre><code>create_shot()\n</code></pre> <p>Open a <code>FXCreateShotDialog</code> instance to create a new shot in the project.</p>"},{"location":"fxprojectbrowser/#fxquinox.tools.fxprojectbrowser.FXProjectBrowserWindow.create_step","title":"create_step","text":"<pre><code>create_step()\n</code></pre> <p>Open a <code>FXCreateStepDialog</code> instance to create a new step in the shot.</p>"},{"location":"fxprojectbrowser/#fxquinox.tools.fxprojectbrowser.FXProjectBrowserWindow.create_task","title":"create_task","text":"<pre><code>create_task()\n</code></pre> <p>Open a <code>FXCreateTaskDialog</code> instance to create a new task in the step.</p>"},{"location":"fxprojectbrowser/#fxquinox.tools.fxprojectbrowser.FXProjectBrowserWindow.create_workfile_from_preset","title":"create_workfile_from_preset","text":"<pre><code>create_workfile_from_preset(preset_file: Optional[str] = None)\n</code></pre> <p>Creates a workfile from the selected preset file, inside the current <code>task/workfiles</code> directory.</p> <p>Parameters:</p> Name Type Description Default <code>preset_file</code> <code>str</code> <p>The file to create the workfile from. Defaults to <code>None</code>.</p> <code>None</code>"},{"location":"fxprojectbrowser/#fxquinox.tools.fxprojectbrowser.run_project_browser","title":"run_project_browser","text":"<pre><code>run_project_browser(\n    parent: QWidget = None,\n    quit_on_last_window_closed: bool = False,\n    dcc: DCC = fxentities.DCC.standalone,\n) -&gt; QMainWindow\n</code></pre> <p>Runs the project browser UI.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>The parent widget. Defaults to <code>None</code>.</p> <code>None</code> <code>quit_on_last_window_closed</code> <code>bool</code> <p>Whether to quit the application when the last window is closed. Defaults to <code>False</code>.</p> <code>False</code> <code>dcc</code> <code>DCC</code> <p>The DCC to use. Defaults to <code>None</code>.</p> <code>standalone</code> <p>Returns:</p> Name Type Description <code>QMainWindow</code> <code>QMainWindow</code> <p>The project browser window.</p>"},{"location":"fxusd/","title":"fxusd","text":"<p>Module for creating and manipulating USD (Universal Scene Description) files.</p> <p>Some functions coming from usd_scene_construction_utils. And here is the USD C++ API documentation.</p>"},{"location":"fxusd/#fxquinox.fxusd.add_box","title":"add_box","text":"<pre><code>add_box(stage: Stage, path: str, size: Tuple[float, float, float]) -&gt; Prim\n</code></pre> <p>Adds a 3D box to a USD stage.</p> <p>This adds a 3D box to the USD stage.  The box is created with it's center at (x, y, z) = (0, 0, 0).</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <p>class:<code>Usd.Stage</code>): The USD stage to modify.</p> required <code>path</code> <code>str</code> <p>The path to add the USD prim.</p> required <code>size</code> <code>Tuple[float, float, float]</code> <p>The size of the box (x, y, z sizes).</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim: The created USD prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.add_camera","title":"add_camera","text":"<pre><code>add_camera(\n    stage: Stage,\n    path: str,\n    focal_length: float = 35,\n    horizontal_aperature: float = 20.955,\n    vertical_aperature: float = 20.955,\n    clipping_range: Tuple[float, float] = (0.1, 100000),\n) -&gt; Camera\n</code></pre> <p>Adds a camera to a USD stage.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>Stage</code> <p>The USD stage to modify.</p> required <code>path</code> <code>str</code> <p>The path to add the USD prim.</p> required <code>focal_length</code> <code>float</code> <p>The focal length of the camera (default 35).</p> <code>35</code> <code>horizontal_aperature</code> <code>float</code> <p>The horizontal aperature of the camera (default 20.955).</p> <code>20.955</code> <code>vertical_aperature</code> <code>float</code> <p>The vertical aperature of the camera (default 20.955).</p> <code>20.955</code> <code>clipping_range</code> <code>Tuple[float, float]</code> <p>The clipping range of the camera.</p> <code>(0.1, 100000)</code> <p>Returns:</p> Type Description <code>Camera</code> <p>UsdGeom.Camera:  The created USD camera.</p>"},{"location":"fxusd/#fxquinox.fxusd.add_dome_light","title":"add_dome_light","text":"<pre><code>add_dome_light(\n    stage: Stage,\n    path: str,\n    intensity: float = 1000,\n    angle: float = 180,\n    exposure: float = 0.0,\n) -&gt; DomeLight\n</code></pre> <p>Adds a dome light to a USD stage.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>Stage</code> <p>The USD stage to modify.</p> required <code>path</code> <code>str</code> <p>The path to add the USD prim.</p> required <code>intensity</code> <code>float</code> <p>The intensity of the dome light (default 1000).</p> <code>1000</code> <code>angle</code> <code>float</code> <p>The angle of the dome light (default 180)</p> <code>180</code> <code>exposure</code> <code>float</code> <p>THe exposure of the dome light (default 0)</p> <code>0.0</code> <p>Returns:</p> Type Description <code>DomeLight</code> <p>UsdLux.DomeLight:  The created Dome light.</p>"},{"location":"fxusd/#fxquinox.fxusd.add_plane","title":"add_plane","text":"<pre><code>add_plane(\n    stage: Stage,\n    path: str,\n    size: Tuple[float, float],\n    uv: Tuple[float, float] = (1, 1),\n) -&gt; Prim\n</code></pre> <p>Adds a 2D plane to a USD stage.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>Stage</code> <p>The USD stage to modify.</p> required <code>path</code> <code>str</code> <p>The path to add the USD prim.</p> required <code>size</code> <code>Tuple[float, float]</code> <p>The size of the 2D plane (x, y).</p> required <code>uv</code> <code>Tuple[float, float]</code> <p>The UV mapping for textures applied to the plane.  For example, uv=(1, 1), means the texture will be spread to fit the full size of the plane.  uv=(10, 10) means the texture will repeat 10 times along each dimension. uv=(5, 10) means the texture will be scaled to repeat 5 times along the x dimension and 10 times along the y direction.</p> <code>(1, 1)</code> <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim: The created USD prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.add_prim","title":"add_prim","text":"<pre><code>add_prim(stage: Stage, path: str, prim_type: str) -&gt; Prim\n</code></pre> <p>Adds a USD prim to a USD stage.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <p>class:<code>Usd.Stage</code>): The USD stage to modify.</p> required <code>path</code> <code>str</code> <p>The path to add the USD prim.</p> required <code>prim_type</code> <code>str</code> <p>The type of the USD prim to add.</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim: The created USD prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.add_semantics","title":"add_semantics","text":"<pre><code>add_semantics(prim: Prim, type: str, name: str) -&gt; Prim\n</code></pre> <p>Adds semantics to a USD prim.</p> <p>This function adds semantics to a USD prim.  This is useful for assigning classes to objects when generating synthetic data with Omniverse Replicator.</p> <p>For example:</p> <p>add_semantics(dog_prim, \"class\", \"dog\") add_semantics(cat_prim, \"class\", \"cat\")</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to modify.</p> required <code>type</code> <code>str</code> <p>The semantics type.  This depends on how the data is ingested. Typically, when using Omniverse replicator you will set this to \"class\".</p> required <code>name</code> <code>str</code> <p>The value of the semantic type.  Typically, this would correspond to the class label.</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim: The USD prim with added semantics.</p>"},{"location":"fxusd/#fxquinox.fxusd.add_sphere_light","title":"add_sphere_light","text":"<pre><code>add_sphere_light(\n    stage: Stage, path: str, intensity=30000, radius=50, angle=180, exposure=0.0\n) -&gt; SphereLight\n</code></pre> <p>Adds a sphere light to a USD stage.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>Stage</code> <p>The USD stage to modify.</p> required <code>path</code> <code>str</code> <p>The path to add the USD prim.</p> required <code>radius</code> <code>float</code> <p>The radius of the sphere light</p> <code>50</code> <code>intensity</code> <code>float</code> <p>The intensity of the sphere light (default 1000).</p> <code>30000</code> <code>angle</code> <code>float</code> <p>The angle of the sphere light (default 180)</p> <code>180</code> <code>exposure</code> <code>float</code> <p>THe exposure of the sphere light (default 0)</p> <code>0.0</code> <p>Returns:</p> Type Description <code>SphereLight</code> <p>UsdLux.SphereLight:  The created sphere light.</p>"},{"location":"fxusd/#fxquinox.fxusd.add_usd_ref","title":"add_usd_ref","text":"<pre><code>add_usd_ref(stage: Stage, path: str, usd_path: str) -&gt; Prim\n</code></pre> <p>Adds an external USD reference to a USD stage.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <p>class:<code>Usd.Stage</code>): The USD stage to modify.</p> required <code>path</code> <code>str</code> <p>The path to add the USD reference.</p> required <code>usd_path</code> <code>str</code> <p>The filepath or URL of the USD reference (ie: a Nucleus server URL).</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim: The created USD prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.add_xform","title":"add_xform","text":"<pre><code>add_xform(stage: Stage, path: str) -&gt; Prim\n</code></pre> <p>Adds a USD transform (Xform) to a USD stage.</p> <p>This method adds a USD Xform to the USD stage at a given path.  This is helpful when you want to add hierarchy to a scene.  After you create a transform, any USD prims located under the transform path will be children of the transform and can be moved as a group.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <p>class:<code>Usd.Stage</code>): The USD stage to modify.</p> required <code>path</code> <code>str</code> <p>The path to add the USD prim.</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim: The created USD prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.apply_xform_matrix","title":"apply_xform_matrix","text":"<pre><code>apply_xform_matrix(prim: Prim, transform: ndarray) -&gt; Prim\n</code></pre> <p>Applies a homogeneous transformation matrix to the current prim's xform list.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to transform.</p> required <code>transform</code> <code>ndarray</code> <p>The 4x4 homogeneous transform matrix to apply.</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim:  The modified USD prim with the provided transform applied after current transforms.</p>"},{"location":"fxusd/#fxquinox.fxusd.bind_material","title":"bind_material","text":"<pre><code>bind_material(prim: Prim, material: Material) -&gt; Prim\n</code></pre> <p>Binds a USD material to a USD prim.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to modify.</p> required <code>material</code> <code>Material</code> <p>The USD material to bind to the USD prim.</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim:  The modified USD prim with the specified material bound to it.</p>"},{"location":"fxusd/#fxquinox.fxusd.collapse_xform","title":"collapse_xform","text":"<pre><code>collapse_xform(prim: Prim) -&gt; Prim\n</code></pre> <p>Collapses all xforms on a given USD prim.</p> <p>This method collapses all Xforms on a given prim.  For example, a series of rotations, translations would be combined into a single matrix operation.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The Usd.Prim to collapse the transforms of.</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim:  The Usd.Prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.compute_bbox","title":"compute_bbox","text":"<pre><code>compute_bbox(\n    prim: Prim,\n) -&gt; Tuple[Tuple[float, float, float], Tuple[float, float, float]]\n</code></pre> <p>Computes the axis-aligned bounding box for a USD prim.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to compute the bounding box of.</p> required <p>Returns:</p> Type Description <code>Tuple[Tuple[float, float, float], Tuple[float, float, float]]</code> <p>Tuple[Tuple[float, float, float], Tuple[float, float, float]] The ((min_x, min_y, min_z), (max_x, max_y, max_z)) values of the bounding box.</p>"},{"location":"fxusd/#fxquinox.fxusd.compute_bbox_center","title":"compute_bbox_center","text":"<pre><code>compute_bbox_center(prim: Prim) -&gt; Tuple[float, float, float]\n</code></pre> <p>Computes the (x, y, z) center of the axis-aligned bounding box for a prim.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to compute the center of.</p> required <p>Returns:</p> Type Description <code>Tuple[float, float, float]</code> <p>Tuple[float, float, float]:  The (x, y, z) center of the bounding box.</p>"},{"location":"fxusd/#fxquinox.fxusd.compute_bbox_size","title":"compute_bbox_size","text":"<pre><code>compute_bbox_size(prim: Prim) -&gt; Tuple[float, float, float]\n</code></pre> <p>Computes the (x, y, z) size of the axis-aligned bounding box for a prim.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to compute the size of.</p> required <p>Returns:</p> Type Description <code>Tuple[float, float, float]</code> <p>Tuple[float, float, float]:  The (x, y, z) size of the bounding box.</p>"},{"location":"fxusd/#fxquinox.fxusd.compute_look_at_matrix","title":"compute_look_at_matrix","text":"<pre><code>compute_look_at_matrix(\n    at: Tuple[float, float, float],\n    up: Tuple[float, float, float],\n    eye: Tuple[float, float, float],\n) -&gt; ndarray\n</code></pre> <p>Computes a 4x4 homogeneous \"look at\" transformation matrix.</p> <p>Parameters:</p> Name Type Description Default <code>at</code> <code>Tuple[float, float, float]</code> <p>The (x, y, z) location that the transform should be facing.  For example (0, 0, 0) if the transformation should face the origin.</p> required <code>up</code> <code>Tuple[float, float, float]</code> <p>The up axis fot the transform.  ie: (0, 0, 1) for the up-axis to correspond to the z-axis.</p> required <code>eye</code> <code>Tuple[float, float]</code> <p>The (x, y, z) location of the transform. For example, (100, 100, 100) if we want to place a camera at (x=100,y=100,z=100)</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray:  The 4x4 homogeneous transformation matrix.</p>"},{"location":"fxusd/#fxquinox.fxusd.compute_sphere_point","title":"compute_sphere_point","text":"<pre><code>compute_sphere_point(\n    elevation: float, azimuth: float, distance: float\n) -&gt; Tuple[float, float, float]\n</code></pre> <p>Compute a sphere point given an elevation, azimuth and distance.</p> <p>Parameters:</p> Name Type Description Default <code>elevation</code> <code>float</code> <p>The elevation in degrees.</p> required <code>azimuth</code> <code>float</code> <p>The azimuth in degrees.</p> required <code>distance</code> <code>float</code> <p>The distance.</p> required <p>Returns:</p> Type Description <code>Tuple[float, float, float]</code> <p>Tuple[float, float, float]: The sphere coordinate.</p>"},{"location":"fxusd/#fxquinox.fxusd.deg2rad","title":"deg2rad","text":"<pre><code>deg2rad(x)\n</code></pre> <p>Convert degrees to radians.</p>"},{"location":"fxusd/#fxquinox.fxusd.export_stage","title":"export_stage","text":"<pre><code>export_stage(stage: Stage, filepath: str, default_prim=None)\n</code></pre> <p>Exports a USD stage to a given filepath.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>Stage</code> <p>The USD stage to export.</p> required <code>filepath</code> <code>str</code> <p>The filepath to export the USD stage to.</p> required <code>default_prim</code> <code>Optional[str]</code> <p>The path of the USD prim in the stage to set as the default prim.  This is useful when you want to use the exported USD as a reference, or when you want to place the USD in Omniverse.</p> <code>None</code>"},{"location":"fxusd/#fxquinox.fxusd.get_material","title":"get_material","text":"<pre><code>get_material(stage: Stage, path: str) -&gt; Material\n</code></pre> <p>Returns a material at the specified path in a USD stage.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>Stage</code> <p>The USD stage to query.</p> required <code>path</code> <code>str</code> <p>The path of the material.</p> required <p>Returns:</p> Type Description <code>Material</code> <p>UsdShade.Material:  The USD material at the specified path.</p>"},{"location":"fxusd/#fxquinox.fxusd.get_num_xform_ops","title":"get_num_xform_ops","text":"<pre><code>get_num_xform_ops(prim: Prim) -&gt; int\n</code></pre> <p>Returns the number of xform ops on a given prim.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to query.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of xform ops on the prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.get_prim","title":"get_prim","text":"<pre><code>get_prim(stage: Stage, path: str) -&gt; Prim\n</code></pre> <p>Returns a prim at the specified path in a USD stage.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>Stage</code> <p>The USD stage to query.</p> required <code>path</code> <code>str</code> <p>The path of the prim.</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim:  The USD prim at the specified path.</p>"},{"location":"fxusd/#fxquinox.fxusd.get_prim_info","title":"get_prim_info","text":"<pre><code>get_prim_info(prim: Prim) -&gt; Dict[str, Any]\n</code></pre> <p>Returns information about a given USD prim.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to query.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary with information about the prim.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; stage = Usd.Stage.Open(\"test.usda\")\n&gt;&gt;&gt; prim = stage.GetPrimAtPath(\"/box\")\n&gt;&gt;&gt; get_prim_info(prim)\n&gt;&gt;&gt; {\n...     \"name\": \"box\",\n...     \"path\": \"/box\",\n...     \"type\": \"Xform\",\n...     ...\n... }\n</code></pre>"},{"location":"fxusd/#fxquinox.fxusd.get_prim_prototype","title":"get_prim_prototype","text":"<pre><code>get_prim_prototype(stage: Stage, prim: Prim) -&gt; Optional[Prim]\n</code></pre> <p>Returns the prototype of a given instance prim.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>Stage</code> <p>The USD stage to query.</p> required <code>prim</code> <code>Prim</code> <p>The USD prim to query.</p> required <p>Returns:</p> Type Description <code>Optional[Prim]</code> <p>Optional[Usd.Prim]: The prototype prim of the given prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.get_visibility","title":"get_visibility","text":"<pre><code>get_visibility(prim: Prim)\n</code></pre> <p>Returns the visibility of a given prim.</p> <p>See <code>set_visibility</code> for details.</p>"},{"location":"fxusd/#fxquinox.fxusd.get_xform_op_order","title":"get_xform_op_order","text":"<pre><code>get_xform_op_order(prim: Prim) -&gt; Optional[Sequence[str]]\n</code></pre> <p>Returns the order of Xform ops on a given prim.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to query.</p> required <p>Returns:</p> Type Description <code>Optional[Sequence[str]]</code> <p>Optional[Sequence[str]]:  The order of the xform ops.  For example: [\"xformOp:translate\", \"xformOp:rotateX\", \"xformOp:rotateY\"].</p>"},{"location":"fxusd/#fxquinox.fxusd.iterator","title":"iterator","text":"<pre><code>iterator(\n    start_prim: Prim,\n    predicate: Optional[_Term] = None,\n    condition: Optional[Callable[[Prim], bool]] = None,\n    prune_children: bool = True,\n) -&gt; List[Prim]\n</code></pre> <p>Iterates over the USD stage starting from a given prim, optionally filtering prims based on a condition.</p> <p>Parameters:</p> Name Type Description Default <code>start_prim</code> <code>Prim</code> <p>The starting point of the iteration.</p> required <code>predicate</code> <code>_Term</code> <p>A predicate that determines which prims are included in the iteration. Defaults to <code>None</code>.</p> <code>None</code> <code>condition</code> <code>Callable[[Prim], bool]</code> <p>A function that takes a Usd.Prim as input and returns <code>True</code> if the prim should be included in the result. If <code>None</code>, all prims are included. Defaults to <code>None</code>.</p> <code>None</code> <code>prune_children</code> <code>bool</code> <p>If <code>True</code>, children of matching prims are not included in the result. Defaults to <code>True</code>.</p> <code>True</code> <p>Returns:</p> Type Description <code>List[Prim]</code> <p>List[Usd.Prim]: A list of prims that match the condition (if provided).</p> <p>Examples:</p> <p>Example A</p> <pre><code>&gt;&gt;&gt; def is_mesh(prim):\n...     return prim.IsA(UsdGeom.Mesh)\n&gt;&gt;&gt; stage = Usd.Stage.Open(\"test.usda\")\n&gt;&gt;&gt; start_prim = stage.GetPrimAtPath(\"/\")\n&gt;&gt;&gt; predicate = Usd.PrimIsActive &amp; Usd.PrimIsLoaded\n&gt;&gt;&gt; selected_prims = standard_iterator(\n...     start_prim, predicate, condition=is_mesh\n... )\n[Usd.Prim(&lt;/boxA&gt;), Usd.Prim(&lt;/boxB&gt;), Usd.Prim(&lt;/boxC&gt;)]\n</code></pre> <p>Example B</p> <pre><code>&gt;&gt;&gt; iterator(\n...     stage.GetPseudoRoot(),\n...     condition=lambda x: x.IsA(UsdGeom.Camera)\n...     )\n[Usd.Prim(&lt;/camera&gt;)]\n</code></pre>"},{"location":"fxusd/#fxquinox.fxusd.new_anonymous_layer","title":"new_anonymous_layer","text":"<pre><code>new_anonymous_layer() -&gt; Layer\n</code></pre> <p>Creates a new anonymous USD layer.</p> <p>Returns:</p> Type Description <code>Layer</code> <p>Sdf.Layer:  The USD layer.</p>"},{"location":"fxusd/#fxquinox.fxusd.new_in_memory_stage","title":"new_in_memory_stage","text":"<pre><code>new_in_memory_stage() -&gt; Stage\n</code></pre> <p>Creates a new in memory USD stage.</p> <p>Returns:</p> Type Description <code>Stage</code> <p>Usd.Stage:  The USD stage.</p>"},{"location":"fxusd/#fxquinox.fxusd.rad2deg","title":"rad2deg","text":"<pre><code>rad2deg(x: float) -&gt; float\n</code></pre> <p>Convert radians to degrees.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The angle in radians.</p> required"},{"location":"fxusd/#fxquinox.fxusd.rotate_x","title":"rotate_x","text":"<pre><code>rotate_x(prim: Prim, angle: float) -&gt; Prim\n</code></pre> <p>Rotates a prim around the X axis.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to rotate.</p> required <code>angle</code> <code>float</code> <p>The rotation angle in degrees.</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim: The rotated prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.rotate_y","title":"rotate_y","text":"<pre><code>rotate_y(prim: Prim, angle: float) -&gt; Prim\n</code></pre> <p>Rotates a prim around the Y axis.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to rotate.</p> required <code>angle</code> <code>float</code> <p>The rotation angle in degrees.</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim: The rotated prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.rotate_z","title":"rotate_z","text":"<pre><code>rotate_z(prim: Prim, angle: float) -&gt; Prim\n</code></pre> <p>Rotates a prim around the Z axis.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to rotate.</p> required <code>angle</code> <code>float</code> <p>The rotation angle in degrees.</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim: The rotated prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.scale","title":"scale","text":"<pre><code>scale(prim: Prim, scale: Tuple[float, float, float]) -&gt; Prim\n</code></pre> <p>Scales a prim along the (x, y, z) dimensions.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to scale.</p> required <code>scale</code> <code>Tuple[float, float, float]</code> <p>The scaling factors for the (x, y, z) dimensions.</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim:  The scaled prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.set_visibility","title":"set_visibility","text":"<pre><code>set_visibility(\n    prim: Prim, visibility: Literal[\"inherited\", \"invisible\"] = \"inherited\"\n) -&gt; Prim\n</code></pre> <p>Sets the visibility of a prim.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The prim to control the visibility of.</p> required <code>visibility</code> <code>str</code> <p>The visibility of the prim.  \"inherited\" if the prim is visibile as long as it's parent is visible, or invisible if it's parent is invisible.  Otherwise, \"invisible\" if the prim is invisible regardless of it's parent's visibility.</p> <code>'inherited'</code> <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim: The USD prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.set_xform_op_order","title":"set_xform_op_order","text":"<pre><code>set_xform_op_order(prim: Prim, op_order: Sequence[str]) -&gt; Prim\n</code></pre> <p>Sets the order of Xform ops on a given prim.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to modify.</p> required <code>op_order</code> <code>Sequence[str]</code> <p>The order of the xform ops.  For example: [\"xformOp:translate\", \"xformOp:rotateX\", \"xformOp:rotateY\"]</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim: The modified USD prim with the specified xform op order.</p>"},{"location":"fxusd/#fxquinox.fxusd.stack_prims","title":"stack_prims","text":"<pre><code>stack_prims(\n    prims: Sequence[Prim], axis: int = 2, gap: float = 0, align_center=False\n) -&gt; Sequence[Prim]\n</code></pre> <p>Stacks prims on top of each other (or side-by-side).</p> <p>This function stacks prims by placing them so their bounding boxes are adjacent along a given axis.</p> <p>Parameters:</p> Name Type Description Default <code>prims</code> <code>Prim</code> <p>The USD prims to stack.</p> required <code>axis</code> <code>int</code> <p>The axis along which to stack the prims. x=0, y=1, z=2. Defaults to <code>2</code>.</p> <code>2</code> <code>gap</code> <code>float</code> <p>The spacing to add between stacked elements.</p> <code>0</code> <p>Returns:</p> Type Description <code>Sequence[Prim]</code> <p>Sequence[Usd.Prim]: The stacked prims.</p>"},{"location":"fxusd/#fxquinox.fxusd.translate","title":"translate","text":"<pre><code>translate(prim: Prim, offset: Tuple[float, float, float]) -&gt; Prim\n</code></pre> <p>Translates a prim along the (x, y, z) dimensions.</p> <p>Parameters:</p> Name Type Description Default <code>prim</code> <code>Prim</code> <p>The USD prim to translate.</p> required <code>offset</code> <code>Tuple[float, float, float]</code> <p>The offsets for the (x, y, z) dimensions.</p> required <p>Returns:</p> Type Description <code>Prim</code> <p>Usd.Prim:  The translated prim.</p>"},{"location":"fxusd/#fxquinox.fxusd.xform_op_move_end_to_front","title":"xform_op_move_end_to_front","text":"<pre><code>xform_op_move_end_to_front(prim: Prim) -&gt; Prim\n</code></pre> <p>Pops the last xform op on a given prim and adds it to the front.</p>"},{"location":"fxutils/","title":"fxutils","text":""},{"location":"fxutils/#fxquinox.fxutils.check_and_create_lock_file","title":"check_and_create_lock_file","text":"<pre><code>check_and_create_lock_file(lock_file_path: str) -&gt; bool\n</code></pre> <p>Check for an existing lock and handle it appropriately.</p> <p>Parameters:</p> Name Type Description Default <code>lock_file_path</code> <code>str</code> <p>The path to the lock file.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the lock file was created, <code>False</code> otherwise (aka another instance is running).</p>"},{"location":"fxutils/#fxquinox.fxutils.get_configuration_file_value","title":"get_configuration_file_value","text":"<pre><code>get_configuration_file_value(\n    file_name: str, section: str, option: str\n) -&gt; Optional[str]\n</code></pre> <p>Reads a value from a configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>The name of the configuration file.</p> required <code>section</code> <code>str</code> <p>The section in the configuration file.</p> required <code>option</code> <code>str</code> <p>The option in the section.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The value of the option if found, <code>None</code> otherwise.</p>"},{"location":"fxutils/#fxquinox.fxutils.is_process_running","title":"is_process_running","text":"<pre><code>is_process_running(pid: int) -&gt; bool\n</code></pre> <p>Check if there's a running process with the given PID.</p> <p>Parameters:</p> Name Type Description Default <code>pid</code> <code>int</code> <p>The process ID to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the process is running, <code>False</code> otherwise.</p>"},{"location":"fxutils/#fxquinox.fxutils.is_valid_string","title":"is_valid_string","text":"<pre><code>is_valid_string(input_string: str) -&gt; bool\n</code></pre> <p>Check if a string is valid for use. Match only alphanumeric characters, underscores, or hyphens.</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>The string to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the string is valid, <code>False</code> otherwise.</p>"},{"location":"fxutils/#fxquinox.fxutils.open_directory","title":"open_directory","text":"<pre><code>open_directory(path: str) -&gt; None\n</code></pre> <p>Opens the given file or directory in the system file manager.</p>"},{"location":"fxutils/#fxquinox.fxutils.remove_lock_file","title":"remove_lock_file","text":"<pre><code>remove_lock_file(lock_file_path: str) -&gt; None\n</code></pre> <p>Remove the lock file.</p> <p>Parameters:</p> Name Type Description Default <code>lock_file_path</code> <code>str</code> <p>The path to the lock file.</p> required"},{"location":"fxutils/#fxquinox.fxutils.transform_to_valid_string","title":"transform_to_valid_string","text":"<pre><code>transform_to_valid_string(input_string: str) -&gt; str\n</code></pre> <p>Transform a string into a valid format by keeping only alphanumeric characters, underscores, or hyphens.</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>The string to transform.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The transformed string with only valid characters.</p>"},{"location":"fxutils/#fxquinox.fxutils.update_configuration_file","title":"update_configuration_file","text":"<pre><code>update_configuration_file(\n    file_name: str, section: str, option: str, value: str\n) -&gt; None\n</code></pre> <p>Updates or creates a value in a configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>The name of the configuration file.</p> required <code>section</code> <code>str</code> <p>The section in the configuration file.</p> required <code>option</code> <code>str</code> <p>The option in the section.</p> required <code>value</code> <code>str</code> <p>The value to update or create.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; update_configuration_file(\"fxquinox.cfg\", \"settings\", \"theme\", \"dark\")\n</code></pre>"}]}