#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT."
)

class FxquinoxContextInfo "FxquinoxContextInfo" (
    doc = "Holder for fxquinox-specific context information."
)
{
    string fxquinox:asset (
        doc = "If the entity is an asset, the asset."
    )
    string fxquinox:assetType (
        doc = "If the entity is an asset, the type of asset."
    )
    string fxquinox:entity (
        doc = "The current context entity (asset or shot)."
    )
    string fxquinox:hostname (
        doc = "The current hostname (machine name)."
    )
    string fxquinox:project (
        doc = "The project name."
    )
    asset fxquinox:projectRoot (
        doc = "The project root path."
    )
    string fxquinox:sequence (
        doc = "If the entity is a shot, the sequence."
    )
    string fxquinox:shot (
        doc = "If the entity is a shot, the shot."
    )
    string fxquinox:step (
        doc = "The context pipeline step."
    )
    string fxquinox:task (
        doc = "The context pipeline task."
    )
    string fxquinox:user (
        doc = "The current username."
    )
}

class FxquinoxRenderPass "FxquinoxRenderPass" (
    doc = "Define a Fxquinox render pass."
)
{
    uniform string[] fxquinox:command (
        doc = '''The command to run in order to generate\r
        renders for this pass.  The job submission code can use\r
        this to properly send tasks to the job scheduling software\r
        that will generate products.\r
\r
        The command can contain variables that will be substituted\r
        appropriately during submission, as seen in the example below\r
        with {fxquinox:outputPicture}.\r
\r
        For example:\r
        command[0] = "prman"\r
        command[1] = "-progress"\r
        command[2] = "-pixelvariance"\r
        command[3] = "-0.15"\r
        command[4] = "{fxquinox:outputPicture}" # the fxquinox:outputPicture property will be substituted\r
\r
        '''
    )
    uniform bool fxquinox:denoise:enable = 0 (
        doc = "When True, this FxquinoxRenderPass pass should be denoised."
    )
    rel fxquinox:inputPasses (
        doc = """The set of other Passes that this Pass depends on\r
        in order to be constructed properly.  For example, a Pass A\r
        may generate a texture, which is then used as an input to\r
        Pass B.\r
\r
        By default, usdRender makes some assumptions about the\r
        relationship between this prim and the prims listed in inputPasses.\r
        Namely, when per-frame tasks are generated from these pass prims,\r
        usdRender will assume a one-to-one relationship between tasks\r
        that share their frame number.  Consider a pass named 'composite'\r
        whose _inputPasses_ targets a Pass prim named 'beauty`.\r
        By default, each frame for 'composite' will depend on the\r
        same frame from 'beauty':\r
        beauty.1 -> composite.1\r
        beauty.2 -> composite.2\r
        etc\r
\r
        The consumer of this RenderPass graph of inputs will need to resolve\r
        the transitive dependencies.\r
        """
    )
    uniform asset fxquinox:outpuRenderUSD
    uniform asset fxquinox:outputCacheUSD
    uniform asset fxquinox:outputPicture
    uniform token fxquinox:passType (
        doc = """A string used to categorize differently structured\r
        or executed types of passes within a customized pipeline.\r
\r
        For example, when multiple DCC's (e.g. Houdini, Katana, Nuke)\r
        each compute and contribute different Products to a final result,\r
        it may be clearest and most flexible to create a separate\r
        RenderPass for each.\r
\r
        """
    )
    rel fxquinox:renderSource (
        doc = """The source prim to render from.  If _fxquinox:outputPicture_ is not present,\r
        the source is assumed to be a RenderSettings prim present in the current\r
        Usd stage. If fxquinox:outputPicture is present, the source should be found in the\r
        file there. This relationship might target a string attribute on this\r
        or another prim that identifies the appropriate object in the external\r
        container.\r
\r
        For example, for a Usd-backed pass, this would point to a RenderSettings\r
        prim.  Houdini passes would point to a Rop.  Nuke passes would point to\r
        a write node.\r
        """
    )
}

